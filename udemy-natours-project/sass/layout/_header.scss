.header {
    height: 80vh;
    background-image: linear-gradient(
        to right bottom,
        rgba($color-primary-light, 0.8),
        rgba($color-primary-dark, 0.8)),
        url(../img/hero-small.jpg);
    background-size: cover; 
    background-position: top;
    position: relative;
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

    // If this is supported then implement
    @supports (clip-path: polygon(0, 0)) or (-webkit-clip-path: polygon(0,0)) {
        -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
        clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
        height: 95vh;
    }

    // If > 192dpi and width > 600px this code will be used
    // On a smart phone (600px breakpoint * 2 (phones have 2 pixel density)
    // = 1200px) only need small img
    // 600 / 16 = 37.5em, 2000 / 16 = 125em
    @media only screen and (min-resolution: 192dpi) and (min-width: 37.5em),
        only screen and (-webkit-min-device-pixel-ration: 2) and (min-width: 37.5em), //Safari
        only screen and (min-width: 125em) {
        background-image: linear-gradient(
        to right bottom,
        rgba($color-primary-light, 0.8),
        rgba($color-primary-dark, 0.8)),
        url(../img/hero.jpg);
    }


    @include respond(phone) {
        -webkit-clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
        clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
    }

    &__logo-box{
        /* absolute positioning */
        position: absolute;
        /* measurements determined by parent element (header) */
        top: 4rem;
        left: 4rem;
    }

    &__logo {
        /* width figured out by browser */
        height: 3.5rem;
    }
    
    &__text-box {
        position: absolute;
        /* top and left position according to parent (0,0 of element) */
        top: 40%;
        left: 50%;
        /* transform no longer in relation to parent, but to element itself */
        /*  50% of ele height to top, 50% of ele width to left. Can center element */
        transform: translate(-50%, -50%);
        text-align: center;
    }
}
